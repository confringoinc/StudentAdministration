{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","e","_e","f","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","from","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","isObject","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","keys","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","ref","focus","refs","getFieldsValues","fieldsRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","option","checked","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","shouldUseNativeValidation","mounted","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","mount","inputRef","setCustomValidty","reportValidity","setCustomValidity","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","mode","isOnSubmit","tearDowns","tearDown","push","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","updateFormState","resolverRef","formStateRef","defaultValuesRef","fieldArrayDefaultValuesRef","contextRef","inFieldArrayActionRef","isMountedRef","subjectsRef","watch","control","array","state","namesRef","Set","unMount","watchAll","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","shouldRenderBaseOnError","shouldSkipRender","inputState","isValidFromResolver","isWatched","previousError","validateForm","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","register","isHTMLElement","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","getIsDirty","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","shouldCheckValid","valid","fieldError","fieldNames","convertToArrayPayload","schemaResult","all","fieldName","shouldFocus","updateIsValid","updateIsValidAndInputValue","isValueUndefined","defaultChecked","setValues","entries","fieldKey","fieldValue","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","getValues","handleChange","inputType","shouldSkipValidation","hasValidation","skipValidation","parentNodeName","currentError","clearErrors","inputName","setError","watchInternal","isGlobal","isArrayNames","fieldValues","subscribe","unregister","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","onChange","onBlur","shouldUnmount","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","registerAbsentFields","reset","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","unregisterFieldNames","isLiveInDom","getProxyFormState"],"mappings":"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","file":"static/js/1.782d8aee.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isDateObject from './utils/isDateObject';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUseNativeValidation,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n          shouldUseNativeValidation,\n        )\n      )[name];\n\n      await shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n          shouldUseNativeValidation,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n            shouldUseNativeValidation,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName, {})._f)\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          name ? fieldNames : namesRef.current.mount,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? isUndefined(get(fieldArrayDefaultValuesRef.current, name))\n          ? get(defaultValuesRef.current, name)\n          : get(fieldArrayDefaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                  shouldUseNativeValidation,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode, shouldUseNativeValidation],\n  );\n\n  const setValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n        const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        (isFieldArray || !isPrimitive(fieldValue) || (field && !field._f)) &&\n        !isDateObject(fieldValue)\n          ? setValues(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              fieldValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, name, type: inputType } }) => {\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions(\n              [name],\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (\n            await validateField(\n              field,\n              isValidateAllFieldCriteria,\n              shouldUseNativeValidation,\n            )\n          )[name];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n      }\n    }\n\n    subjectsRef.current.watch.next({\n      values: getValues(),\n    });\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n              shouldUseNativeValidation,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [\n      shouldFocusError,\n      isValidateAllFieldCriteria,\n      criteriaMode,\n      shouldUseNativeValidation,\n    ],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      defaultValuesRef.current = { ...updatedValues };\n      fieldArrayDefaultValuesRef.current = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? defaultValuesRef.current\n          : { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const unregisterFieldNames = [];\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n      !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterFieldNames.push(name);\n    }\n\n    unregisterFieldNames.length &&\n      unregister(unregisterFieldNames as FieldPath<TFieldValues>[]);\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        setValues,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n"],"sourceRoot":""}